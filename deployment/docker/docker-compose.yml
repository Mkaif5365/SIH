# Docker Compose for complete Railway Parts Management System
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: railway-parts-db
    environment:
      POSTGRES_DB: ${DB_NAME:-inventory_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - railway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend API
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: railway-parts-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: database
      DB_NAME: ${DB_NAME:-inventory_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_PORT: 5432
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - railway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flutter Web App
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.flutter
    container_name: railway-parts-web
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - railway-network
    restart: unless-stopped

  # Admin Dashboard
  admin:
    build:
      context: ../../admin_dashboard
      dockerfile: ../deployment/docker/Dockerfile.flutter
    container_name: railway-parts-admin
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - railway-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: railway-parts-cache
    ports:
      - "6379:6379"
    networks:
      - railway-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  railway-network:
    driver: bridge